package io.baselogic.springsecurity.domain;

import lombok.*;

import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.util.Calendar;

import javax.persistence.*;

/**
 * An {@link Event} is an item on a calendar that contains an owner (the person who created it), an attendee
 * (someone who was invited to the event), when the event will occur, a summary, and a description. For simplicity, all
 * fields are required.
 *
 * @author mickknutson
 *
 */
// JPA Annotations:
@Entity
@Table(name = "events")

// Lombok Annotations:
//@Data // Throws StackOverflowError
//@Builder // NOTE: This does not work with JPA
@Getter
@Setter
//@ToString
//@EqualsAndHashCode

@AllArgsConstructor
@NoArgsConstructor
public class Event {

//    public Event() {}

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @NotEmpty(message = "Summary is required")
    private String summary;

    @NotEmpty(message = "Description is required")
    private String description;

    @NotNull(message = "When is required (yyyy-MM-dd HH:mm)")
    @Column(name="event_date")
    private Calendar when;


    @NotNull(message = "Owner is required")
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="owner", referencedColumnName="id")
    private AppUser owner;

    @NotNull(message = "Attendee is required")
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name="attendee", referencedColumnName="id")
    private AppUser attendee;


    // Setter / Getter generated by Lombok

} // The End...
